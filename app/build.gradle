plugins {
    id 'com.android.application'
}

/**
 * Will generate versionCode from versionName that follows Semantic Versioning
 */
ext {
    /**
     * Application version is located version variable.
     * And should follow next policy:
     * X1.X2.X3-type-flavor, where X - any digits and type is optional alphabetical suffix.
     * X1 - major version
     * X2 - minor version
     * X3 - patch
     * There are next supported type:
     *  dev - code 0
     *  alpha - code 1
     *  beta - code 2
     *  no suffix - code 9 - means final production build from market.
     * flavors currently disabled, value (0)
     */
    buildVersionCode = { String versionName ->
        /**
         * Here is representation of Version code generation from version name.
         *
         *  *--------- major version
         *  |  *------ minor version
         *  |  |  *--- patch version
         *  |  |  |*-- buildType (dev/alpha/beta/rc/release)
         *  |  |  ||*- flavor - disabled.
         *  |  |  |||
         *  X00X00XXX
         * so
         *  1.13.20-alpha-v19 = 10130201
         * see details below:
         *  *--------- 1 is major version
         *  |  *------ 13 is minor version
         *  |  |  *--- 20 is patch version
         *  |  |  |*-- type 1 is alpha.
         *  |  |  ||*- flavor 0 (disabled)
         *  |  |  |||
         *  101302010
         */

        def (mainPart, typeName) = versionName.toLowerCase().tokenize('-')

        if (typeName == null) {
            type = "9"
        } else if (typeName.equals("dev")) {
            type = "0"
        } else if (typeName.equals("alpha")) {
            type = "1"
        } else if (typeName.equals("beta")) {
            type = "2"
        } else {
            println("Unknown build type = " + typeName + ". Please look into app/versioning.gradle.")
            throw new RuntimeException("Unknown type = " + typeName)
        }

        /**
         * At the project start time, there was flavor support.
         * Now we should reserve last digit, because removing it will reduce version code 10 times.
         * And next version will have versionCode less than previous.
         */
        flavor = "0" // disabled

        int flavorDigit = 1
        int typeDigit = flavorDigit * 10
        int patchDigit = typeDigit * 10
        int minorDigit = patchDigit * 1000
        int majorDigit = minorDigit * 1000

        def (major, minor, patch) = mainPart.tokenize('.')
        (major, minor, patch, type, flavor) = [major, minor, patch, type, flavor].collect {
            it.toInteger()
        }
        (major * majorDigit) + (minor * minorDigit) + (patch * patchDigit) + (type * typeDigit) + (flavor * flavorDigit);
    }
}

def keystorePropertiesFile = rootProject.file("keystore.properties")

// Create a variable called keystorePropertiesFile, and initialize it to your
// keystore.properties file, in the rootProject folder.
def keystoreProperties = new Properties()

// Initialize a new Properties() object called keystoreProperties.
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

// Load your keystore.properties file into the keystoreProperties object.
android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    signingConfigs {
        config {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }

    defaultConfig {
        applicationId "io.yousefessa.robotimer"
        minSdkVersion 21
        targetSdkVersion 30

        def currentBuildType = getCurrentBuildType()
        println("buildType: " + currentBuildType)

        def appVersion = buildVersionCode("0.1.0-" + currentBuildType)
        versionCode appVersion
        versionName appVersion.toString()

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            signingConfig signingConfigs.config
        }
    }
    compileOptions {
        // Flag to enable support for the new language APIs
        coreLibraryDesugaringEnabled true

        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'org.jetbrains:annotations:15.0'
    implementation 'com.github.yousef-essa:ApplicationUpdater:0.2.0'

    testImplementation 'junit:junit:4.+'
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.1.5'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
}

def getCurrentBuildType() {
    def isDebug = gradle.startParameter.taskRequests.any {
        it.args.any { it.endsWith("Debug") } }
    return isDebug ? "dev" : ""
}